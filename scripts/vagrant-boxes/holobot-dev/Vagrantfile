## Vagrantfile

# -----------------------------CONST--------------------------------------------
HOME = File.dirname(__FILE__)
HOME_SCRIPTS = "#{HOME}/../../../scripts" # make it explicit we are in scripts
HOME_BASE_BOX = "#{HOME}/../base-boxes"
HOME_NFS_MOUNT = "#{HOME_SCRIPTS}/nfs_mount"
HOME_LIB = "#{HOME_SCRIPTS}/lib"
HOME_CONF = "#{HOME_SCRIPTS}/conf"

REMOTE_NFS_MOUNT = '/mnt/holobot-nfs'
COMPILE_CUSTOM_ETCD = false

# relies on above (for now, and yes we need to split out project out into gems libs!)
require "#{HOME_LIB}/conf.rb" 
CONFIG = HoloConfig.new(HOME_CONF)
require "#{HOME_LIB}/vm.rb" 

upgrade = <<SCRIPT
echo Running apt-get update and upgrade...
sudo apt-get update -y
#sudo apt-get upgrade -y
SCRIPT

installs = <<SCRIPT
echo "Installing basic tools via apt-get"
sudo apt-get install -y libssl-dev
SCRIPT

cleanup = <<SCRIPT
echo "Cleaning up apt-get cache..."
sudo apt-get clean
SCRIPT

restartNetworking = <<SCRIPT
echo "Restarting networking"
sudo ifdown -a
sudo ifup -a
echo "Sleeping 10 seconds, waiting for networking..."
sleep 10
SCRIPT

strider = <<SCRIPT
echo "Installing strider via Docker..."
sudo docker pull 10.10.10.12:5000/strider
sudo docker run -d -p 3000:3000 10.10.10.12:5000/strider
SCRIPT

mesos = <<SCRIPT
echo "Installing Mesos..."
curl -fL https://raw.github.com/mesosphere/mesos-docker/master/bin/mesos-docker-setup | sudo bash
SCRIPT

registry = <<SCRIPT
## local source dir is default location
## export DOCKER_REGISTRY_CONFIG=config.yml
# export SETTINGS_FLAVOR=dev
# cd /mnt/holobot-nfs/docker-registry
# sudo docker build .
echo "Running docker-registry docker container..."
sudo docker pull samalba/docker-registry
sudo docker run -d -p 5000:5000 samalba/docker-registry
echo "Checking for docker-registry response:"
curl -L http://10.10.10.12:5000/v1/_ping
SCRIPT

etcd_binary_linux = 'etcd-holobot-linux.tar.bz2'
replace_etcd_ubuntu = <<SCRIPT
echo "Compiling etcd for linux and saving to nfs mount..."
# First compile etcd for linux and then package it for future use
cd #{REMOTE_NFS_MOUNT}/etcd/etcd && ./build && tar -cvjf #{REMOTE_NFS_MOUNT}/etcd/#{etcd_binary_linux} etcd

# Stopping and remove cache
echo "Stopping etcd..."

echo "Removing etcd cache..."
sudo rm -R /var/cache/etcd

# Copy files necessary to make etcd work
echo "Unpacking and moving etcd binary"
sudo tar -xvf #{REMOTE_NFS_MOUNT}/etcd/#{etcd_binary_linux} -C /usr/local/bin

echo "Copying custom config file"
sudo cp #{REMOTE_NFS_MOUNT}/etcd/etcd.conf /etc/init/etcd.conf

echo "Restarting etcd..."
sudo service etcd start
SCRIPT

# Move this out to a databag or even better, a yaml file
# (yaml so we don't completely rely on vagrant or chef)
props = {
  :appname => CONFIG.get('version'),
  :scripts => {
    :upgrade => upgrade,
    :installs => installs,
    :cleanup => cleanup,
    :restartNetworking => restartNetworking,
    :strider => strider,
    :mesos => mesos,
    :registry => registry,
    :replace_etcd_ubuntu => replace_etcd_ubuntu
  }, # end scripts
  :chef => {
    :json => { 
      # Override default attributes here.
      'scala' => {
        'version' => '2.10.2',
        'url' => "http://www.scala-lang.org/files/archive/scala-2.10.2.tgz"
      },
      'go' => {
        'version' => '1.1.2'
      },
      'etcd' => {
        'version' => '0.1.2'
      },
      'nodejs' => {
        'version' => '0.10.18',
      }
      # 'nvm' => {
      #   'user' => 'vagrant',
      #   'nodes' => [
      #     'version' => '0.10.18',
      #     'alias' => 'default',
      #     'modules' => [
      #       { 'name' => 'grunt-cli'},
      #       { 'name' => 'httpster'},
      #     ]
      #   ]
      # }
    } # end json
  } # end chef
} # end props


#------------------------------METHODS------------------------------------------

def baseNode(os_name)
  CONFIG.get('machines')[os_name][CONFIG.mode]
end

def baseOSNode(os_name)
  CONFIG.get('machines')[os_name]
end

#------------------------------MAIN---------------------------------------------

# Plugins
#Vagrant.require_plugin 'vagrant-vbguest'
#Vagrant.require_plugin 'vagrant-berkshelf'
#Vagrant.require_plugin 'vagrant-omnibus'

# TODO: this can be refactored out to the yml file now
Vagrant.configure("2") do |config|
  config.vm.define 'ubuntu' , primary: true do |box|
    StandardVM.new('ubuntu', config, box, props, [StandardVMLib.prepare], [StandardVMLib.mesos, StandardVMLib.ubuntuCleanup])
  end

  config.vm.define 'registry' do |box|
    StandardVM.new('registry', config, box, props, [StandardVMLib.prepare], [StandardVMLib.registry, StandardVMLib.ubuntuCleanup])
  end

  config.vm.define 'strider' do |box|
    StandardVM.new('strider', config, box, props, [StandardVMLib.prepare], [StandardVMLib.strider, StandardVMLib.ubuntuCleanup])
  end

  config.vm.define 'coreos' do |box|
    StandardVM.new('coreos', config, box, props)
  end

  config.vm.define 'broker', primary: true do |box|
    StandardVM.new('broker', config, box, props)
  end

  config.vm.define 'fedora' do |box|
    StandardVM.new('fedora', config, box, props)
  end

  config.vm.define 'centos' do |box|
    StandardVM.new('centos', config, box, props)
  end

end