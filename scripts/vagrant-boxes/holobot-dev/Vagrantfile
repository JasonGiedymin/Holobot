## Vagrantfile

## consts
HOME = File.dirname(__FILE__)
HOME_SCRIPTS = "#{HOME}/../../../scripts" # make it explicit we are in scripts
HOME_BASE_BOX = "#{HOME}/../base-boxes"
HOME_NFS_MOUNT = "#{HOME_SCRIPTS}/nfs_mount"

upgrade = <<SCRIPT
echo Running apt-get update and upgrade...
sudo apt-get update -y
sudo apt-get upgrade -y
SCRIPT

installs = <<SCRIPT
sudo apt-get install -y vim git
SCRIPT

cleanup = <<SCRIPT
echo "Cleaning up apt-get cache..."
sudo apt-get clean
SCRIPT

props = {
  :appname =>'Holobot-dev-v2.2',
  :scripts => {
    :upgrade => upgrade,
    :installs => installs,
    :cleanup => cleanup
  }, # end scripts
  :chef => {
    :json => { 
      # Override default attributes here.
      "scala" => {
        "version" => "2.10.2",
        "url" => "http://www.scala-lang.org/files/archive/scala-2.10.2.tgz"
      }
    } # end json
  } # end chef
} # end props

def prepare(config, props)
  # installs
  config.vm.provision :shell, inline: props[:scripts][:upgrade]
  config.vm.provision :shell, inline: props[:scripts][:installs]
end

def finishMessage(config, props)
  config.vm.provision :shell, inline: "echo '#{props[:appname]} started...'"
end
  
def runChef(config, props)
  # chef
  config.omnibus.chef_version = :latest #Define omnibus client to utilize

  config.vm.provision "chef_solo" do |chef|
    chef.log_level = :debug
    chef.cookbooks_path = [
      "#{HOME_SCRIPTS}/berkshelf", 
      "#{HOME_SCRIPTS}/cookbooks"
    ]

    # chef.data_bags_path = "#{HOME_SCRIPTS}/data_bags"

    chef.json = props[:chef][:json]

    chef.add_recipe "docker"
    chef.add_recipe "etcd"
    chef.add_recipe "golang"
    chef.add_recipe "java"
    # chef.add_recipe "nodejs"
    chef.add_recipe "nvm"
    chef.add_recipe "python"
    chef.add_recipe "scala"
  end
end

def cleanup(config, props)
  config.vm.provision :shell, inline: props[:scripts][:cleanup]
end

#Vagrant.require_plugin 'vagrant-vbguest'
#Vagrant.require_plugin 'vagrant-berkshelf'
#Vagrant.require_plugin 'vagrant-omnibus'

Vagrant.configure("2") do |config|

  # Base setup
  config.vm.box = props[:appname]
  #config.vm.box_url = 'http://cloud-images.ubuntu.com/vagrant/raring/current/raring-server-cloudimg-amd64-vagrant-disk1.box'
  config.vm.box_url = "#{HOME_BASE_BOX}/coreos_production_vagrant.box"
  #config.vm.box_url = "#{HOME_BASE_BOX}/raring-server-cloudimg-amd64-vagrant-disk1.box"

  # Vbox specific configs, should think about removing these
  config.vm.provider :virtualbox do |vb|
   vb.customize ["modifyvm", :id, "--hwvirtex", "on"] #in case it is needed
   vb.customize ["modifyvm", :id, "--pae", "on"] #in case it is needed
   vb.customize ["modifyvm", :id, "--memory", "1024"] #min ram to build box
   vb.customize ["modifyvm", :id, "--cpus", "1"] #making sure cpus are accounted at min
   # vb.gui = true #just in case
  end

  # Network
  config.vm.network :private_network, ip: "10.10.10.10"#, :adapter => 2 # assigned to adapter 2 by default
  
  # the main card configuration
  config.vm.network :public_network, :bridge => 'en0: Wi-Fi (AirPort)', :mac => '0800d2FF88F2'#, :adapter => 3
  
  #config.ssh.username = 'core'
  #config.ssh.forward_agent = true
  #config.ssh.timeout = 500
  #config.ssh.max_tries = 40

  # NFS Mount
  config.vm.synced_folder "#{HOME_NFS_MOUNT}", "/home/core/share", :nfs => true #requires root privs

  # In a purely functional lang I would curry and compose the below
  # ruby?
  # prepare(config, props)
  # runChef(config, props)
  # cleanup(config, props)

  # berkshelf - if we want to utilize
  # config.berkshelf.enabled = true
  
  # cleanup(config, props)

  finishMessage(config, props)
end