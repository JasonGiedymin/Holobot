# Holobot Rakefile
#
# `rake` for usage
#

## require
require 'rake/clean'
require 'net/http'

#import 'lib/conf.rb'
import 'lib/system.rb'
import 'lib/git.rb'
import 'lib/vagrant.rb'


# Immediately sync all stdout so that tools like buildbot can
# immediately load in the output.
$stdout.sync = true
$stderr.sync = true


## init
# Change to the directory of this file.
Dir.chdir(File.expand_path("../", __FILE__))


## consts
HOME = File.dirname(__FILE__)
HOME_APPS = "#{HOME}/../apps/"
HOME_UTILS = "#{HOME}/utils"
HOME_NFS = "#{HOME}/nfs_mount"
HOME_COOKBOOKS = "#{HOME}/cookbooks"
HOME_BERKSHELF = "#{HOME}/berkshelf"
HOME_THIRDPARTY = "#{HOME}/thirdparty"
HOME_CONF = "#{HOME}/conf"
HOME_LIB = "#{HOME}/lib"
HOME_BASE_BOX = "#{HOME}/vagrant-boxes/base-boxes"
HOME_VAGRANT_PRIV = "#{HOME}/vagrant-boxes/holobot-dev/.vagrant"
HOME_VAGRANT_BOX = "#{HOME}/vagrant-boxes/holobot-dev"

CLEAN = FileList[
  "#{HOME_UTILS}/*",
  "#{HOME_COOKBOOKS}/*",
  "#{HOME_NFS}/etcd",
  "./Berksfile",
  "./Berksfile.lock",
  "./berkshelf",
  "./thirdparty",
  "./Thorfile",
  "./.git",
  "./Vagrantfile"
].exclude(
  "#{HOME_COOKBOOKS}/README.md"
).exclude(
  # something else
)

# Do not use, use gemfile instead
BASE_GEM_INSTALL_LIST = [
  #"vagrant", # gem bundle version is out of date, do manual install :-()
  #"berkshelf"
]

BASE_VAGRANT_PLUGINS = [
  # "vagrant-vbguest",
  "vagrant-berkshelf",
  "vagrant-omnibus"
]

BASE_BOX_URLS = {
  :ubuntu_12_04_lts => {
    'track' => false, # if already exists, skips
    'url' => 'http://files.vagrantup.com/precise64.box'
  },
  :ubuntu_13_04_lts => {
    'track' => false, # if already exists, skips
    'url' => 'http://cloud-images.ubuntu.com/vagrant/raring/current/raring-server-cloudimg-amd64-vagrant-disk1.box'
  },
  :coreos_production_vagrant => {
    'track' => false, # will track meaning always download
    'url' => 'http://storage.core-os.net/coreos/amd64-generic/dev-channel/coreos_production_vagrant.box'
  }
}

THIRD_PARTY = {
  "docker" => "https://github.com/dotcloud/docker.git",
  "etcd/etcd" => "https://github.com/coreos/etcd.git"
}

Download_File = Struct.new(:host, :path, :file_name)
THIRD_PARTY_DOWNLOADS = [
  Download_File.new('downloads.mesosphere.io', '/master/ubuntu/13.04/', 'mesos_0.15.0-trunk-d20130921_amd64.deb')
]

Utility = Struct.new(:name, :url, :tag, :postinstall)
UTILS = [
  # Disabled tracking vagrant for now, make sure to stick with v1.2.7
  # you may have to do gem uninstall vagrant
  # Utility.new('vagrant', 'https://github.com/mitchellh/vagrant.git', 'v1.2.7', 'gem uninstall -a vagrant && rake install')
]


## Tasks
task :default do
  Rake::Task["help:examples"].invoke
end


def package_etcd
  nfs_target_etcd = "#{HOME_NFS}/etcd"
  FileUtils.rm_rf(nfs_target_etcd)
  Dir.mkdir(nfs_target_etcd)

  etcd_binary_darwin = 'etcd-holobot-darwin.tar.bz2'
  shell_cmd(
    "./",
    "cd #{HOME_THIRDPARTY}/etcd/etcd && ./build && tar -cvjf #{etcd_binary_darwin} etcd && mv #{etcd_binary_darwin} #{HOME_NFS}/etcd/",
    "compile etcd"
  )

  # defer linux to the vm for compilation, just copy etcd to nfs
  shell_cmd(
    "./",
    "cp -R #{HOME_THIRDPARTY}/etcd #{HOME_NFS}",
    "copying etcd for linux compilation later"
  )

  # copy conf file for linux
  shell_cmd(
    "./",
    "cp -R #{HOME_APPS}/ubuntu/etcd/* #{HOME_NFS}/etcd/",
    "copying etcd.conf for use by linux"
  )
end

# Base namespace
namespace :cookbooks do
  def berksInstall(name)
    puts "Adding to berkshelf [ #{name} ]"
    if File.exists?("#{HOME_COOKBOOKS}/#{name}/Berksfile")
      shell_cmd(
        "./",
        "cd #{HOME_COOKBOOKS}/#{name} && berks install --path #{HOME_BERKSHELF}",
        "add #{name} cookbook to berkshelf"
      )
    end
  end

  desc "Manual Update of a remote cookbook"
  task :manual, :name, :url do |t, args|
    puts "Updating remote cookbooks"
    name = args[:name]
    url = args[:url]
    clone(name, url, HOME_COOKBOOKS)    
  end

  desc "Clones all known remote cookbooks"
  task :clone do
    cookbooks = {
      :apt => "https://github.com/opscode-cookbooks/apt.git",
      :ark => "https://github.com/opscode-cookbooks/ark.git",
      :aws => "https://github.com/opscode-cookbooks/aws.git",
      :"build-essential" => "https://github.com/opscode-cookbooks/build-essential.git",
      :dpkg_autostart => "https://github.com/hw-cookbooks/dpkg_autostart",
      :dmg => "https://github.com/opscode-cookbooks/dmg.git",
      :docker => "https://github.com/bflad/chef-docker.git",
      :etcd => "https://github.com/spheromak/etcd-cookbook.git",
      :git => "https://github.com/opscode-cookbooks/git.git",
      :golang => "https://github.com/NOX73/chef-golang.git",
      :java => "https://github.com/opscode-cookbooks/java.git",
      :lxc => "https://github.com/hw-cookbooks/lxc.git",
      :modules => "https://github.com/Youscribe/modules-cookbook.git",
      :nodejs => "https://github.com/mdxp/nodejs-cookbook.git",
      :nvm => "https://github.com/hipsnip-cookbooks/nvm.git",
      :python => "https://github.com/opscode-cookbooks/python.git",
      :runit => "https://github.com/opscode-cookbooks/runit.git",
      :scala => "https://github.com/RiotGames/scala-cookbook.git",
      :windows => "https://github.com/opscode-cookbooks/windows.git",
      :yum => "https://github.com/opscode-cookbooks/yum.git"
    }
    puts "Running clone..."

    cookbooks.each_pair do |name, url|
      clone(name, url, HOME_COOKBOOKS)
      berksInstall(name) #disabled for now
    end

  end
end


namespace :thirdparty do
  desc "Remove existing third-party downloads"
  task :clean do
    FileUtils.rm_rf("#{HOME_THIRDPARTY}")
  end

  desc "Clone third-party software (docker, etc...)"
  task :clone do
    THIRD_PARTY.each_pair do |name, url|
      clone(name, url, HOME_THIRDPARTY)
    end
  end

  desc "Download third-party software"
  task :download do
    THIRD_PARTY_DOWNLOADS.each do |download|
      Net::HTTP.start(download.host) do |http|
        file_path = [download.path, download.file_name].join('')
        file_loc = [HOME_THIRDPARTY, download.file_name].join('/')

        if !File.exists?(file_loc)
          puts("Downloading http://#{download.host}/#{file_path}, this may take a while...")
          resp = http.get(file_path)
          open(file_loc, "w") { |file| file.write(resp.body) }
        else
          puts("Found, no need to download again: [#{file_path}].")
        end
      end
    end
  end

  desc "Gets latest etcd source to compile and package"
  task :package do
    Rake::Task["thirdparty:clean"].invoke
    Rake::Task["thirdparty:clone"].invoke

    package_etcd()
  end
end


# Install namespace for setting up base environment
namespace :install do
  def installGem(gem_name)
    shell_cmd(
      "./",
      "gem install #{gem_name}",
      "install gem #{gem_name}"
    )
  end

  def installVagrantPlugin(pluginName)
    system "vagrant --version"

    shell_cmd(
      "./",
      "vagrant plugin uninstall #{pluginName} && vagrant plugin install #{pluginName}",
      "install vagrant plugin #{pluginName}"
    )
  end

  def installUtils
    Dir.mkdir(HOME_UTILS) unless Dir.exists?(HOME_UTILS)

    UTILS.each do |util|
      util_home = "#{HOME_UTILS}/#{util.name}"

      if !Dir.exists?("#{HOME_UTILS}/#{util.name}")
        Dir.mkdir("#{HOME_UTILS}/#{util.name}")
      else
        puts "Deleting existing utility #{util.name}..."
        FileUtils.rm_rf File.join(HOME_UTILS, util.name)
      end

      puts "Preparing to download utility #{util.name}"
      clone(util.name, util.url, HOME_UTILS)

      shell_cmd(
        util_home,
        "git checkout --quiet tags/#{util.tag}",
        "check out tag #{util.tag}"
      )

      if( util.postinstall.length > 0)
        shell_cmd(
          util_home,
          "bundle install && rake install",
          "install util #{util.name}"
        )
      end

    end
  end

  desc "Install utils for Holobot"
  task :utils do
    installUtils()
  end

  desc "Install deps for Holobot"
  task :deps do
    shell_cmd(
      HOME,
      "bundle install",
      "install gems for Holobot"
    )

    BASE_VAGRANT_PLUGINS.each{ |plugin| installVagrantPlugin(plugin) }
  end

  desc "Full auto install."
  task :auto do
    # Cleanup
    Rake::Task["clobber"].invoke
    
    puts "Making sure VMs are DOWN prior to total cleanup which includes the .vagrant dir..."
    FileUtils.rm_rf("#{HOME_VAGRANT_PRIV}")
    Rake::Task["vm:destroy"].invoke

    Rake::Task["baseboxes:download"].invoke

    # Gather resources
    Rake::Task["cookbooks:clone"].invoke
    Rake::Task["thirdparty:clone"].invoke

    # Install dependencies
    Rake::Task["install:deps"].invoke
    Rake::Task["install:utils"].invoke
    
    puts "\nFull auto install complete!"
  end
end

namespace :help do
  desc "usage examples"
  task :examples do
    puts "\n\n"
    puts " Note: You may see `CLEAN` warnings from running `rake`, you may safely ignore these."
    puts "---------------------------"
    puts " Usage Examples:"
    puts "  `rake -T` lists all the available tasks"
    puts "  `rake clean` cleans up cookbooks and misc files"
    puts "  `rake cookbooks:clone` will autoupdate cookbooks by cloning into cookbooks/"
    puts "  `rake cookbooks:manual['java','https://github.com/opscode-cookbooks/java.git']` to manually clone a cookbook"
    puts "---------------------------"
    puts "\n\n"
  end

  task :default => :examples
end

