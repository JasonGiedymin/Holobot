# Holobot Rakefile
#
# `rake` for usage
#

require 'rake/clean'

HOME = File.dirname(__FILE__)
COOKBOOKS_DIR = "#{HOME}/cookbooks"
BERKSHELF_DIR = "#{HOME}/berkshelf"

CLEAN = FileList[
  "#{COOKBOOKS_DIR}/*",
  "./Berksfile",
  "./Berksfile.lock",
  "./berkshelf",
  "./Thorfile",
  "./.gitignore",
  "./.git",
  "./Gemfile",
  "./Gemfile.lock",
  "./Vagrantfile"
].exclude("#{COOKBOOKS_DIR}/README.md")

BASE_GEM_INSTALL_LIST = [
  #"vagrant", # gem bundle version is out of date, do manual install :-()
  "berkshelf"
]

BASE_VAGRANT_PLUGINS = [
  "vagrant-berkshelf",
  "vagrant-omnibus"
]

task :default do
  Rake::Task["help:examples"].invoke
end

# Base namespace
namespace :cookbooks do
  def clone(name, url)
    puts "Cloning cookbook [ #{name} via #{url} ]"
    if system "git clone #{url} #{COOKBOOKS_DIR}/#{name}"
      puts "-> Repository #{url} cloned.\n\n"
    else
      raise "\n!!!\n   Error cloning url: #{url}\n!!!\n\n"
    end
  end

  def berksInstall(name)
    puts "Adding to berkshelf [ #{name} ]"
    if File.exists?("#{COOKBOOKS_DIR}/#{name}/Berksfile")
      if system "cd #{COOKBOOKS_DIR}/#{name} && berks install --path #{BERKSHELF_DIR}"
        puts "-> cookbook #{name} added to berkshelf.\n\n"
      else
        raise "\n!!!\n   Error adding to berkshelf: #{name}\n!!!\n\n"
      end
    end
  end

  desc "Manual Update of a remote cookbook"
  task :manual, :name, :url do |t, args|
    puts "Updating remote cookbooks"
    name = args[:name]
    url = args[:url]
    clone(name, url)    
  end

  desc "Auto Update of all known remote cookbooks"
  task :auto do
    cookbooks = {
      :golang => "https://github.com/NOX73/chef-golang.git",
      :java => "https://github.com/opscode-cookbooks/java.git",
      :nodejs => "https://github.com/mdxp/nodejs-cookbook.git",
      :nvm => "https://github.com/hipsnip-cookbooks/nvm.git",
      :python => "https://github.com/opscode-cookbooks/python.git",
      :scala => "https://github.com/RiotGames/scala-cookbook.git",
    }
    puts "Running auto update..."

    cookbooks.each_pair do |name, url|
      clone(name, url)
      berksInstall(name) #disabled for now
    end

  end
end


# Install namespace for setting up base environment
namespace :install do
  def installGem(gemName)
    puts "gem install [ #{gemName} ]"
    if system "gem install #{gemName}"
      puts "-> Installed #{gemName}...\n\n"
    else
      raise "\n!!!\n   Error trying to gem install #{gemName}\n!!!\n\n"
    end
  end

  def installVagrantPlugin(pluginName)
    puts "vagrant plugin install [ #{pluginName} ]"
    if system "vagrant plugin install #{pluginName}"
      puts "-> Installed vagrant plugin #{pluginName}...\n\n"
    else
      raise "\n!!!\n   Error trying to vagrant plugin install #{pluginName}\n!!!\n\n"
    end
  end

  desc "Install dependencies for Holobot"
  task :deps do
    puts "Installing dependencies for Holobot"
    BASE_GEM_INSTALL_LIST.each{ |gemName| installGem(gemName) }

    puts "Installing vagrant plugins"
    BASE_VAGRANT_PLUGINS.each{ |plugin| installVagrantPlugin(plugin) }

    puts "\n\n Complete."
  end

end


namespace :help do
  desc "usage examples"
  task :examples do
    puts "\n\n"
    puts " Note: You may see `CLEAN` warnings from running `rake`, you may safely ignore these."
    puts "---------------------------"
    puts " Usage Examples:"
    puts "  `rake -T` lists all the available tasks"
    puts "  `rake clean` cleans up cookbooks and misc files"
    puts "  `rake cookbooks:auto` will autoupdate cookbooks by cloning into cookbooks/"
    puts "  `rake cookbooks:manual['java','https://github.com/opscode-cookbooks/java.git']` to manually clone a cookbook"
    puts "---------------------------"
    puts "\n\n"
  end

  task :default => :examples
end

